{"meta":{"title":"Geoion","subtitle":null,"description":"404 not found","author":"Eski Yin","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-03-30T10:53:24.000Z","updated":"2017-03-13T12:56:59.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2017-04-02T17:33:48.000Z","updated":"2017-04-02T17:33:48.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"66666"},{"title":"tags","date":"2017-03-30T10:53:24.000Z","updated":"2017-03-13T12:57:26.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Redis剖析","slug":"redis-dissect","date":"2017-04-02T14:30:42.000Z","updated":"2017-04-04T18:49:20.000Z","comments":true,"path":"2017/04/02/redis-dissect/","link":"","permalink":"http://yoursite.com/2017/04/02/redis-dissect/","excerpt":"","text":"根据同事分享的 Redis剖析 整理，算是对《Redis设计与实现》一书的理解和实际使用的总结。 redis 架构 数据结构 Redis Object目前 Redis 的数据结构有 String, List, Set, Sorted_Set, Hash 五种。 所有的对象都可以用 redisObject 结构来表示，每个对象都有 type, encoding, ptr 这三个属性。 12345typedef struct redisObject &#123; unsigned type:4; unsigned encoding:4; void *ptr;&#125; robj; 不同的 type 对应不同的对象: type Object REDIS_STRING String REDIS_LIST List REDIS_HASH Dict REDIS_SET Hash REDIS_ZSET Zset 基于这些类型的对象，有不用的数据结构实现的编码: type encoding Object REDIS_STRING REDIS_ENCODING_INT REDIS_STRING REDIS_ENCODING_EMBSTR REDIS_STRING REDIS_ENCODING_RAW REDIS_LIST REDIS_ENCODING_ZIPLIST REDIS_LIST REDIS_ENCODING_LINKEDLIST REDIS_HASH REDIS_ENCODING_ZIPLIST REDIS_HASH REDIS_ENCODING_HT REDIS_SET REDIS_ENCODING_INTSET REDIS_SET REDIS_ENCODING_HT REDIS_ZSET REDIS_ENCODING_ZIPLIST REDIS_ZSET REDIS_ENCODING_SKIPLIST StringRedis 的 String 使用的是自己构件的 simple dynamic string(SDS) 抽象类型，基本的结构为： 12345struct sdshdr &#123; int len; //字符串长度 “Redis” =&gt; 5 int free; //buf数组中剩余的字符串长 “Redis” =&gt; 0 char buf[] //“Redis” =&gt; ['R','e','d','i','s','\\0']&#125; SDS为什么这么设计： 不同于C语言的字符串，获取字符串长度操作需要遍历整个字符串，遇到 \\0 才能返回字符串长度，SDS创建和修改操作是已经将字符串长度存在 len 中，获取超长字符串时，复杂度仅为O(1)。对于SDS的怎么工作的，详见SDS的分配策略 List Redis 的列表最 SetZsetHash单机数据库RDBAOFEventClientsserver功能PubsubTransactionBitArraySlowLogMonitor进阶LRU 淘汰策略内存分析增加命令增加新数据结构增加模块多进程 Redis","categories":[{"name":"Database","slug":"Database","permalink":"http://yoursite.com/categories/Database/"},{"name":"Cache","slug":"Database/Cache","permalink":"http://yoursite.com/categories/Database/Cache/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"}]},{"title":"InfluxDB入门与influxdb-python","slug":"influxdb-and-influxdb-python","date":"2017-03-13T15:21:38.000Z","updated":"2017-04-06T08:29:19.000Z","comments":true,"path":"2017/03/13/influxdb-and-influxdb-python/","link":"","permalink":"http://yoursite.com/2017/03/13/influxdb-and-influxdb-python/","excerpt":"InfluxDBInfluxDB 是用 Go 语言编写的一个开源分布式时序、事件和指标数据库，InfluxDB 提供类 SQL 语法，很容易上手，但是又和SQL有很大差别。 InfiuxDB 同时也提供了 python client 方便开发，Github地址：influxdb-python。","text":"InfluxDBInfluxDB 是用 Go 语言编写的一个开源分布式时序、事件和指标数据库，InfluxDB 提供类 SQL 语法，很容易上手，但是又和SQL有很大差别。 InfiuxDB 同时也提供了 python client 方便开发，Github地址：influxdb-python。正好最近项目中用到了InfluxDB，梳理一些从0开始的学习过程，这里默认已经在掌握 SQL 的基本概念和操作的基础上展开。 InfluxDB 仅仅单机版本免费，集群使用并不免费，注意。 安装Mac 的开发环境下，可以使用 Homebrew 来安装 InfluxDB： 12brew updatebrew install influxdb 安装完之后可以用过 Homebrew 来来启动 InfluxDB 的服务： 1brew services start influxdb 相应的可以停止 ç 的服务： 1brew services stop influxdb 服务启动之后可以即可连接到 InfluxDB，可以说是安装成功了: 1234$ influxConnected to http://localhost:8086 version v1.2.0InfluxDB shell version: v1.2.0&gt; Influxdb-python 可以通过 pip 安装： 1pip install influxdb 与传统数据库的一些差别 influxDB SQL 含义 databse database 数据库 measurement table 数据库中的表 points row 一条记录 Point由除了数据（field）之外，还有 时间戳（time） 、标签（tags），每条数据会自动生成时间并记录，时间戳是数据库中的 主索引，标签可以作为索引的属性，将数据分类等。 基本操作InfluxDB 和 SQL 数据库的操作差别不大。 数据库操作InfluxDB 也提供了多数据库的支持，与与mysql相同： 12345&gt; show databasesname: databasesname----_internal 新建和删除数据库数据库： 12&gt; create database test&gt; drop database test 切换到使用的数据库： 1use test 表的基本操作显示所有表： 12345&gt; show measurementsname: measurementsname----students 删除表： 1&gt; drop measurement students 这里和SQL不一样的地方就是没有创建表的命令，是的你没看错，真没有，这和mongoDB类似。 数据的基本操作插入数据： 123&gt; insert [measurement],[tag],[field],[time]&gt; insert students,class=1,name=zhangsan age=20 如果之前不存在 students 这张表，这条 insert 操作相当于先执行了表的创建，此时表的字段已经确定。如果此时再往 students 表中添加新的字段，这就不行了： 12&gt; insert students,class=1,name=wangwu age=25 sex=maleERR: &#123;&quot;error&quot;:&quot;unable to parse &apos;students,class=1,name=wangwu age=25 sex=male&apos;: bad timestamp&quot;&#125; 这里报错是个 bad timestamp ，原因在于当有 n 个字段的时候，insert 后的第 n+1 个参数其实是个时间戳，可以验证一下： 1234567&gt; insert students,class=1,name=wangwu age=25 1231241231412&gt; select * from studentsname: studentstime age class name---- --- ----- ----1231241231412 25 1 wangwu1489428363333805010 20 1 zhangsan 数据查询如上所示，与 SQL 是一样的。但是 InfluxDB 属于时序数据库，所以没有提供数据修改和删除的方法。 基本用户管理查看用户： 1234&gt; show users;user admin---- -----root true 可以创建一个普通用户或者管理员权限的用户，方法和mysql类似 12&gt; create user &quot;username&quot; with password &quot;password&quot;;&gt; create user &quot;username&quot; with password &quot;password&quot; with all privileges; 像删除表和数据库一样删除用户： 1&gt; drop user ‘username’; 使用 influxdb-python导入其实到这里差不多就可以开始用 influxdb-python 了。在项目中导入模块： 1from influxdb import InfluxDBClient 连接数据库1client = InfluxDBClient('localhost', 8086, 'root', 'root', 'test') 基本用法InfluxDB 的数据库创建： 1client.create_database('test1') InfluxDB 的操作比较简单，基本大部分的操作都集中在插库和查询上： 123456789101112131415body = [ &#123; \"measurement\": \"test\", \"tags\": &#123; \"class\": 1 &#125;, \"fields\": &#123; \"name\": \"zhangsan\", \"age\": 25 &#125;, \"time\": \"2017-03-16T21:03:00Z\", &#125;]client.write_points(body) #if success return True 查询： 1result = client.query('select value from test;') 异常处理导入错误处理的 exceptions 模块： 123456from influxdb import exceptionstry: client.write_points(body)except exceptions.InfluxDBClientError as e: logging(e) InfluxDB在Python中的一些问题在Python中生成的时间戳是不满足InfluxDB的时间戳精度的， 123&gt;&gt;&gt; import time&gt;&gt;&gt; time.time()1490870040.651711 所以此处要补全一下python中的时间戳，简单粗暴的方法： 123&gt;&gt;&gt; import time&gt;&gt;&gt; int(inttime.time()*10**9)1490870857735662080 扩展阅读InfluxDB详解之TSM存储引擎解析（一）InfluxDB详解之TSM存储引擎解析（二）时间序列数据库调研之InfluxDB","categories":[{"name":"Database","slug":"Database","permalink":"http://yoursite.com/categories/Database/"},{"name":"Python","slug":"Database/Python","permalink":"http://yoursite.com/categories/Database/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"influxdb","slug":"influxdb","permalink":"http://yoursite.com/tags/influxdb/"}]}]}